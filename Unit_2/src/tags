!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ClearList_L	LinkList.c	/^Status ClearList_L(LinkList L){$/;"	f
ClearList_Sq	SqList.c	/^Status ClearList_Sq(SqList *L){$/;"	f
DestroyList_L	LinkList.c	/^Status DestroyList_L(LinkList L){$/;"	f
DestroyList_Sq	SqList.c	/^Status DestroyList_Sq(SqList *L){$/;"	f
ElemType	LinkList.c	/^typedef int ElemType;$/;"	t	file:
ElemType	SqList.c	/^typedef int ElemType;		\/\/定义ElemType$/;"	t	file:
GetElem_L	LinkList.c	/^Status GetElem_L(LNode L,int i,ElemType *e){$/;"	f
GetElem_Sq	SqList.c	/^Status GetElem_Sq(SqList L,int i,ElemType *e){$/;"	f
InitList_L	LinkList.c	/^Status InitList_L(LinkList L){$/;"	f
InitList_Sq	SqList.c	/^Status InitList_Sq(SqList *L){$/;"	f
LIST_INCREMENT	SqList.c	10;"	d	file:
LIST_INIT_SIZE	SqList.c	9;"	d	file:
LNode	LinkList.c	/^typedef struct LNode{$/;"	s	file:
LNode	LinkList.c	/^} LNode,*LinkList;$/;"	t	typeref:struct:LNode	file:
LinkList	LinkList.c	/^} LNode,*LinkList;$/;"	t	typeref:struct:LNode	file:
List	SqList.c	/^typedef struct List{$/;"	s	file:
ListDelete_L	LinkList.c	/^Status ListDelete_L(LinkList L,int i,ElemType *e){$/;"	f
ListDelete_Sq	SqList.c	/^Status ListDelete_Sq(SqList *L,int i,ElemType *e){$/;"	f
ListEmpty_L	LinkList.c	/^Bool ListEmpty_L(LNode L){$/;"	f
ListEmpty_Sq	SqList.c	/^Bool  ListEmpty_Sq(SqList L){$/;"	f
ListInsert_L	LinkList.c	/^Status ListInsert_L(LinkList L,int i,ElemType e){$/;"	f
ListInsert_Sq	SqList.c	/^Status ListInsert_Sq(SqList *L,int i,ElemType e){$/;"	f
ListLength_L	LinkList.c	/^int ListLength_L(LNode L){$/;"	f
ListLength_Sq	SqList.c	/^int ListLength_Sq(SqList L){$/;"	f
ListTraverse_Sq	SqList.c	/^Status ListTraverse_Sq(SqList L,Bool visit(ElemType e)){$/;"	f
LocateElem_L	LinkList.c	/^int LocateElem_L(LNode L,ElemType e,Bool (*compare)(ElemType a,ElemType b)){$/;"	f
LocateElem_Sq	SqList.c	/^int LocateElem_Sq(SqList L,ElemType e,Bool (*compare)(ElemType a,ElemType b)){$/;"	f
MergeList_Sq	MergeList_Sq.c	/^void MergeList_Sq(SqList a,SqList b,SqList *c){$/;"	f
NextElem_L	LinkList.c	/^Status NextElem_L(LNode L,ElemType cur_e,ElemType *next_e){$/;"	f
NextElem_Sq	SqList.c	/^Status NextElem_Sq(SqList L,ElemType cur_e,ElemType *next_e){$/;"	f
PrintList_Sq	SqList.c	/^void PrintList_Sq(SqList L){$/;"	f
PriorElem_L	LinkList.c	/^Status PriorElem_L(LNode L,ElemType cur_e,ElemType *pre_e){$/;"	f
PriorElem_Sq	SqList.c	/^Status PriorElem_Sq(SqList L,ElemType cur_e,ElemType *pre_e){$/;"	f
SqList	SqList.c	/^}SqList;$/;"	t	typeref:struct:List	file:
data	LinkList.c	/^	ElemType data;$/;"	m	struct:LNode	file:
elem	SqList.c	/^	ElemType *elem;		\/\/存储空间基地址$/;"	m	struct:List	file:
equal	union_Sq.c	/^Bool equal(ElemType a,ElemType b){	\/\/判断a与b是否相等，若相等返回TRUE,不相等返回FALSE;$/;"	f
length	SqList.c	/^	int length;		\/\/当前长度$/;"	m	struct:List	file:
listsize	SqList.c	/^	int listsize;		\/\/当前分配的存储容量，sizeof(ElemType)为单位$/;"	m	struct:List	file:
next	LinkList.c	/^	struct LNode * next;$/;"	m	struct:LNode	typeref:struct:LNode::LNode	file:
union_Sq	union_Sq.c	/^void union_Sq(SqList *a,SqList b){$/;"	f
