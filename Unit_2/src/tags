!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CLNode	CircularLinkList.c	/^typedef struct CLNode{$/;"	s	file:
CLNode	CircularLinkList.c	/^}CLNode,*CLinkList;$/;"	t	typeref:struct:CLNode	file:
CLinkList	CircularLinkList.c	/^}CLNode,*CLinkList;$/;"	t	typeref:struct:CLNode	file:
ClearList_CL	CircularLinkList.c	/^Status ClearList_CL(CLinkList *CL){$/;"	f
ClearList_L	LinkList.c	/^Status ClearList_L(LinkList *L){$/;"	f
ClearList_Sq	SqList.c	/^Status ClearList_Sq(SqList *L){$/;"	f
CreateList_L	CreateList_L.c	/^Status CreateList_L(LinkList *L,int n){$/;"	f
DestroyList_CL	CircularLinkList.c	/^Status DestroyList_CL(CLinkList *CL){$/;"	f
DestroyList_L	LinkList.c	/^Status DestroyList_L(LinkList *L){$/;"	f
DestroyList_Sq	SqList.c	/^Status DestroyList_Sq(SqList *L){$/;"	f
ElemType	CircularLinkList.c	/^typedef int ElemType;$/;"	t	file:
ElemType	LinkList.c	/^typedef int ElemType;$/;"	t	file:
ElemType	SqList.c	/^typedef int ElemType;		\/\/定义ElemType$/;"	t	file:
GetElem_CL	CircularLinkList.c	/^Status GetElem_CL(CLinkList CL,int i,ElemType *e){$/;"	f
GetElem_L	LinkList.c	/^Status GetElem_L(LinkList L,int i,ElemType *e){$/;"	f
GetElem_Sq	SqList.c	/^Status GetElem_Sq(SqList L,int i,ElemType *e){$/;"	f
InitList_CL	CircularLinkList.c	/^Status InitList_CL(CLinkList *CL){$/;"	f
InitList_L	LinkList.c	/^Status InitList_L(LinkList *L){$/;"	f
InitList_Sq	SqList.c	/^Status InitList_Sq(SqList *L){$/;"	f
LIST_INCREMENT	SqList.c	10;"	d	file:
LIST_INIT_SIZE	SqList.c	9;"	d	file:
LNode	LinkList.c	/^typedef struct LNode{$/;"	s	file:
LNode	LinkList.c	/^} LNode,*LinkList;$/;"	t	typeref:struct:LNode	file:
LinkList	LinkList.c	/^} LNode,*LinkList;$/;"	t	typeref:struct:LNode	file:
List	SqList.c	/^typedef struct List{$/;"	s	file:
ListDelete_CL	CircularLinkList.c	/^Status ListDelete_CL(CLinkList CL,int i,ElemType *e){$/;"	f
ListDelete_L	LinkList.c	/^Status ListDelete_L(LinkList L,int i,ElemType *e){$/;"	f
ListDelete_Sq	SqList.c	/^Status ListDelete_Sq(SqList *L,int i,ElemType *e){$/;"	f
ListEmpty_CL	CircularLinkList.c	/^Bool ListEmpty_CL(CLinkList CL){$/;"	f
ListEmpty_L	LinkList.c	/^Bool ListEmpty_L(LinkList L){$/;"	f
ListEmpty_Sq	SqList.c	/^Bool  ListEmpty_Sq(SqList L){$/;"	f
ListInsert_CL	CircularLinkList.c	/^Status ListInsert_CL(CLinkList CL,int i,ElemType e){$/;"	f
ListInsert_L	LinkList.c	/^Status ListInsert_L(LinkList L,int i,ElemType e){$/;"	f
ListInsert_Sq	SqList.c	/^Status ListInsert_Sq(SqList *L,int i,ElemType e){$/;"	f
ListLength_CL	CircularLinkList.c	/^int ListLength_CL(CLinkList CL){$/;"	f
ListLength_L	LinkList.c	/^int ListLength_L(LinkList L){$/;"	f
ListLength_Sq	SqList.c	/^int ListLength_Sq(SqList L){$/;"	f
ListTraverse_CL	CircularLinkList.c	/^Status ListTraverse_CL(CLinkList CL,Bool (*visit)(ElemType)){$/;"	f
ListTraverse_L	LinkList.c	/^Status ListTraverse_L(LinkList L,Bool visit(ElemType e)){$/;"	f
ListTraverse_Sq	SqList.c	/^Status ListTraverse_Sq(SqList L,Bool visit(ElemType e)){$/;"	f
LocateElem_CL	CircularLinkList.c	/^int LocateElem_CL(CLinkList CL,ElemType e,Bool (*compare)(ElemType ,ElemType)){$/;"	f
LocateElem_L	LinkList.c	/^int LocateElem_L(LinkList L,ElemType e,Bool (*compare)(ElemType a,ElemType b)){$/;"	f
LocateElem_Sq	SqList.c	/^int LocateElem_Sq(SqList L,ElemType e,Bool (*compare)(ElemType a,ElemType b)){$/;"	f
MergeList_L	MergeList_L.c	/^void MergeList_L(LinkList *La,LinkList *Lb,LinkList *Lc){		\/\/需要将原来的La，Lb改动（废除他们的头结点，并且将实参的La,Lb为NULL，所以这里应该传入'引用'，即LinkList *La(而不是LinkList La)）$/;"	f
MergeList_Sq	MergeList_Sq.c	/^void MergeList_Sq(SqList a,SqList b,SqList *c){$/;"	f
NextElem_CL	CircularLinkList.c	/^Status NextElem_CL(CLinkList CL,ElemType cur_e,ElemType *next_e){$/;"	f
NextElem_L	LinkList.c	/^Status NextElem_L(LinkList L,ElemType cur_e,ElemType *next_e){$/;"	f
NextElem_Sq	SqList.c	/^Status NextElem_Sq(SqList L,ElemType cur_e,ElemType *next_e){$/;"	f
PrintList_Sq	SqList.c	/^void PrintList_Sq(SqList L){$/;"	f
Print_CL	CircularLinkList.c	/^void Print_CL(CLinkList CL){$/;"	f
Print_L	LinkList.c	/^void Print_L(LinkList L){$/;"	f
PriorElem_CL	CircularLinkList.c	/^Status PriorElem_CL(CLinkList CL,ElemType cur_e,ElemType *pre_e){$/;"	f
PriorElem_L	LinkList.c	/^Status PriorElem_L(LinkList L,ElemType cur_e,ElemType *pre_e){$/;"	f
PriorElem_Sq	SqList.c	/^Status PriorElem_Sq(SqList L,ElemType cur_e,ElemType *pre_e){$/;"	f
SqList	SqList.c	/^}SqList;$/;"	t	typeref:struct:List	file:
Union_L	Union_L.c	/^void Union_L(LinkList *La,LinkList *Lb){$/;"	f
Union_Sq	Union_Sq.c	/^void Union_Sq(SqList *a,SqList b){$/;"	f
data	CircularLinkList.c	/^	ElemType data;$/;"	m	struct:CLNode	file:
data	LinkList.c	/^	ElemType data;$/;"	m	struct:LNode	file:
elem	SqList.c	/^	ElemType *elem;		\/\/存储空间基地址$/;"	m	struct:List	file:
equal	Union_Sq.c	/^Bool equal(ElemType a,ElemType b){	\/\/判断a与b是否相等，若相等返回TRUE,不相等返回FALSE;$/;"	f
equals	CircularLinkList.c	/^Bool equals(ElemType a,ElemType b){$/;"	f
equals	LinkList.c	/^Bool equals(ElemType a,ElemType b){$/;"	f
length	SqList.c	/^	int length;		\/\/当前长度$/;"	m	struct:List	file:
listsize	SqList.c	/^	int listsize;		\/\/当前分配的存储容量，sizeof(ElemType)为单位$/;"	m	struct:List	file:
max	CircularLinkList.c	/^Bool max(ElemType a,ElemType b){$/;"	f
max	LinkList.c	/^Bool max(ElemType a,ElemType b){$/;"	f
next	CircularLinkList.c	/^	struct CLNode *next;$/;"	m	struct:CLNode	typeref:struct:CLNode::CLNode	file:
next	LinkList.c	/^	struct LNode * next;$/;"	m	struct:LNode	typeref:struct:LNode::LNode	file:
visit	CircularLinkList.c	/^Bool visit(ElemType e){$/;"	f
visit	LinkList.c	/^Bool visit(ElemType e){$/;"	f
